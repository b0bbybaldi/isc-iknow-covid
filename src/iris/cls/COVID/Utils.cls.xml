<?xml version="1.0" encoding="UTF-8"?>
<Export generator="IRIS" version="26">
<Class name="COVID.Utils">
<TimeCreated>65457,63788.159824</TimeCreated>

<Method name="CleanUp">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tRS = ##class(%SQL.Statement).%ExecDirect(,"SELECT Name FROM %Dictionary.CompiledClass WHERE Name LIKE 'Research.Document%'")
	while tRS.%Next() {
		do $classmethod(tRS.Name,"%KillExtent")
	}
	quit $$$OK
]]></Implementation>
</Method>

<Method name="LoadAll">
<ClassMethod>1</ClassMethod>
<FormalSpec>pBaseDir:%String="C:\Users\bdeboe\Desktop\covid\"</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC = $$$OK
	try {
		set tSep = $s($$$isWINDOWS:"\",1:"/")
		set:$e(pBaseDir,*)'=tSep pBaseDir = pBaseDir_tSep
		
		do ..CleanUp()
		
		for tDir = "pmc_custom_license", "comm_use_subset", "noncomm_use_subset", "biorxiv_medrxiv" {
			set tSC = ..LoadDir(pBaseDir_tDir_tSep)
			quit:$$$ISERR(tSC)
		}
		
	} catch (ex) {
		set tSC = ex.AsStatus()
	}
	quit tSC
]]></Implementation>
</Method>

<Method name="LoadDir">
<ClassMethod>1</ClassMethod>
<FormalSpec>pDir:%String="C:\Users\bdeboe\Desktop\covid\pmc_custom_license\",pStore:%String(VALUELIST=",raw,full")="full",pMaxErrors:%Integer=100</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC = $$$OK
	try {
		set tSep = $s($$$isWINDOWS:"\",1:"/")
		set:$e(pDir,*)'=tSep pDir = pDir_tSep
		
		write !,"Loading from directory: ",pDir
		
		set tRS = ##class(%ResultSet).%New()
		set tRS.ClassName = "%File"
		set tRS.QueryName = "FileSet"
		do tRS.%Execute(pDir, "*.json")
		// ignore errors. they would simply mean the directory isn't there
		
		set tFile = ##class(%Stream.FileCharacter).%New()
		
		set (n,errors) = 0
		while tRS.%Next() {
			set tRecord = ##class(Research.Document).%New()
			do tFile.LinkToFile(tRS.Name)
			set tSC = tRecord.%JSONImport(tFile)
			quit:$$$ISERR(tSC)
			
			if (pStore = "raw") {
				
				set tRecord.Filename = $piece(tFile.Filename,tSep,*)
				set tRecord.Source = $piece(pDir,tSep,*-1)
				set tSC = tRecord.%Save()
				
			} else {
				
				set tFullDoc = ##class(Research.FullDocument).%New()
				set tFullDoc.Source = $piece(pDir,tSep,*-1)
				set tFullDoc.Filename = tFile.Filename
				set tFullDoc.PaperID = $e($piece(tFile.Filename,tSep,*),1,*-5)
				set tFullDoc.Title = tRecord.metadata.title
				
				set tText = ""
				
				// some papers are badly encoded: truncate title to 25 words
				if $l(tFullDoc.Title)>250 {
					set tText = tFullDoc.Title
					set tFullDoc.Title = $piece(tFullDoc.Title," ",1,25)
					write !,"Bad title for paper ",tFullDoc.PaperID," - prepending to Abstract and truncating"
				}
				
				for i = 1:1:tRecord.abstract.Count() {
					set tText = tText _ $c(13,10,13,10) _ tRecord.abstract.GetAt(i).text
				}
				do tFullDoc.Abstract.Write($zstrip(tText,"<>C"))
				
				set tText=""
				for i = 1:1:tRecord.bodytext.Count() {
					set tText = tText _ $c(13,10,13,10) _ tRecord.bodytext.GetAt(i).text
				}
				do tFullDoc.BodyText.Write($zstrip(tText,"<>C"))
				
				set tSC = tFullDoc.%Save()
			}
			
			if $$$ISERR(tSC) {
				write !,"Error writing paper ",$e($piece(tFile.Filename,tSep,*),1,*-5), /*" (",$system.Status.GetErrorText(tSC),")",*/ ", skipping"
				set errors = errors+1
				quit:errors>=pMaxErrors
			} else {
				set n = n+1
			}
		}
		quit:$$$ISERR(tSC)
		write !,"Loaded ",n," documents",!
		
	} catch (ex) {
		set tSC = ex.AsStatus()
	}
	quit tSC
]]></Implementation>
</Method>
</Class>
</Export>
